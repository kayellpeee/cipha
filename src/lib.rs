#![feature(test)]
#![feature(collections)]
extern crate test;
mod cipher;

pub use cipher::feistel_encrypt;
pub use cipher::feistel_decrypt;

mod feistel_tests {
    use cipher::feistel_encrypt;
    use cipher::feistel_decrypt;
    use test::Bencher;

    #[test]
    fn it_works() {
        let ciphertext = feistel_encrypt("keenan", 19, 4);
        let plaintext = feistel_decrypt(ciphertext, 19, 4);
        assert_eq!("keenan", plaintext);

        let odd_ciphertext = feistel_encrypt("ricky", 110, 2);
        let odd_plaintext = feistel_decrypt(odd_ciphertext, 110, 2);
        assert_eq!("ricky", odd_plaintext);

        let odd_rounds_ciphertext = feistel_encrypt("julian", 92, 5);
        let odd_rounds_plaintext = feistel_decrypt(odd_rounds_ciphertext, 92, 5);
        assert_eq!("julian", odd_rounds_plaintext);
    }

    #[test]
    fn it_works_larger() {
        // shouldn't error with larger key for longer rounds
        let ciphertext = feistel_encrypt("Larger string", 10091993, 32);
        let plaintext = feistel_decrypt(ciphertext, 10091993, 32);
        assert_eq!("Larger string", plaintext);

        let odd_rounds_even_ciphertext = feistel_encrypt(
            "Some odd rounds even str", 564738291, 25);
        let odd_rounds_even_plaintext = feistel_decrypt(
            odd_rounds_even_ciphertext, 564738291, 25);
        assert_eq!("Some odd rounds even str", odd_rounds_even_plaintext);

        let odd_rounds_ciphertext = feistel_encrypt(
            "Some odd rounds", 564738291, 25);
        let odd_rounds_plaintext = feistel_decrypt(
            odd_rounds_ciphertext, 564738291, 25);
        assert_eq!("Some odd rounds", odd_rounds_plaintext);
    }

    #[test]
    fn max_key_rounds() {
        // should work for max u32 u8
        let even_ciphertext = feistel_encrypt(
            "The quick blue fox", 4294967295, 255);
        let even_plaintext = feistel_decrypt(
            even_ciphertext, 4294967295, 255);
        assert_eq!("The quick blue fox", even_plaintext);

        let odd_ciphertext = feistel_encrypt(
            "The quick brown fox", 4294967295, 255);
        let odd_plaintext = feistel_decrypt(odd_ciphertext, 4294967295, 255);
        assert_eq!("The quick brown fox", odd_plaintext);
    }

    /// One "metric" of an encryption protocol's strength is how little relation
    /// there is between the inputs and outputs. AKA there must be either
    /// a random difference between input and output, or a consistent output
    /// regardless of input
    /// i.e. either
    ///  "a" -> 7, "b" -> 42, "c" -> 0.1451, "de" -> 6623
    ///  or
    ///  "a" -> 1.013, "b" -> 1.003, "c" -> 1.201, "de" -> 1.031
    /// Both are really hard to draw patterns from & thus reverse engineer the
    /// encryption algorithm. To test this we'll find the difference b/w input and
    /// output and see if similar inputs map to similar outputs (not random) as long
    /// as all inupts don't map to similar outputs (consistent).
    #[test]
    fn delta() {
        let plain_alphabet = "abcdefghijklmnopqrstuvwxyz";
        let cipher_alphabet = feistel_encrypt(plain_alphabet, 42, 5);
        let mut delta: u32;
        let mut average_delta: u32 = 0;
        let mut max_delta: u32 = 0;
        for tuple in plain_alphabet.bytes().enumerate() {
            if cipher_alphabet[tuple.0] > tuple.1 as u32 {
                delta = cipher_alphabet[tuple.0] - tuple.1 as u32;
            } else {
                delta =  tuple.1 as u32 - cipher_alphabet[tuple.0];
            }
            average_delta += delta / cipher_alphabet.len() as u32;
            if delta > max_delta {
               max_delta = delta;
            }
        }
        let plain_alphabet_2 = "abcdefghijklmnopqrstuvwxyz";
        let cipher_alphabet_2 = feistel_encrypt(plain_alphabet, 20150406, 87);
        let mut delta_2: u32;
        let mut average_delta_2: u32 = 0;
        let mut max_delta_2: u32 = 0;
        for tuple in plain_alphabet_2.bytes().enumerate() {
            if cipher_alphabet_2[tuple.0] > tuple.1 as u32 {
                delta_2 = cipher_alphabet_2[tuple.0] - tuple.1 as u32;
            } else {
                delta_2 =  tuple.1 as u32 - cipher_alphabet_2[tuple.0];
            }
            average_delta_2 += delta_2 / cipher_alphabet_2.len() as u32;
            if delta_2 > max_delta_2 {
               max_delta_2 = delta_2;
            }
        }
        println!("key 42 5 rounds max {:?} avg {:?}", max_delta, average_delta);
        println!("key 20150406 87 rounds rounds max {:?} avg {:?}",
                 max_delta_2, average_delta_2);
        assert!(max_delta != max_delta_2);
        assert!(average_delta != average_delta_2);

        // These aren't really tests, just printing results to get a sense of what's
        // going on. Well set up defined tests later, which will probably be similar
        // to benchmark tests——used for insight not testing code functionality
        let plain_message = "Perhaps it was because I was a younger man and more
        impressionable.";
        let cipher_message = feistel_encrypt(plain_message, 1381964, 32);
        average_delta = 0;
        max_delta = 0;
        for tuple in plain_message.bytes().enumerate() {
            if cipher_message[tuple.0] > tuple.1 as u32 {
                delta = cipher_message[tuple.0] - tuple.1 as u32;
            } else {
                delta =  tuple.1 as u32 - cipher_message[tuple.0];
            }
           average_delta += delta / cipher_message.len() as u32;
           if delta > max_delta {
               max_delta = delta;
           }
        }
        println!("average delta\t {:?}", average_delta);
        println!("max delta\t\t {:?}", max_delta);
        // Main test wouldn't be in the max, min or average difference between plain
        // vs cipher text, but in the variance b/w the two. Want either no variance
        // or unpredictable....will be hard to test for unpredictable variance
    }
    #[bench]
    fn sentence_encryption(b: &mut Bencher) {
        let plaintext = "In the election that followed, his widow, Sirimavo
            Bandaranaike, became prime minister on the sympathy vote.";
        b.iter(|| feistel_encrypt(plaintext, 19652000, 158));
    }
    #[bench]
    fn sentence_decryption(b: &mut Bencher) {
        let ciphertext = vec![2571093993, 1150472712, 614563871, 3509912448,
        2949655941, 3780934990, 1869949444, 2665866390, 4237835233, 4195977159,
        1528281238, 3415170568, 1980798752, 3764872917, 1150472712, 4148994966,
        762872726, 18868128, 1326266952, 2001816942, 1869949444, 2388883055,
        3506462930, 1381068616, 1853370852, 1720565976, 1436985582, 1019426508,
        3460560700, 835343916, 2913789266, 831144132, 1542884151, 4058696829,
        2070600185, 2376192468, 2483744318, 4046802884, 3506462930, 2376192468,
        3010443061, 3537016722, 3379935085, 1537914793, 3858039052, 2483744318,
        748466817, 1209016909, 3901360541, 4279974290, 1145570795, 1788738485,
        1788738485, 1788738485, 1788738485, 1788738485, 1788738485, 1788738485,
        1788738485, 1788738485, 1788738485, 1788738485, 1788738485, 1788738485,
        1788738485, 4287230428, 3527595119, 512495351, 1293845163, 484345627,
        2053489555, 2835082591, 3536995766, 2521262901, 2739336475, 2304120468,
        2705308009 , 3031438619, 663514344, 1190468015, 2229352288, 2164990375,
        3692666785, 2872135153, 2835082591, 1937129042, 700501386, 4082882478,
        581739285, 2620649323, 2705308009, 3758882884, 4115154850, 153991973,
        3999316298, 913652860, 2056535692, 251073862, 3034865106, 1246442496,
        3042673105, 3180332087, 4278193680 , 2271627602, 1499269049, 489801195,
        3011516955, 760804792, 4115154850, 489801195, 1055938534, 1045746652,
        2904559349, 170049894, 3537942949, 3011516955, 1268481837, 3270737718,
        3202267887, 1320172744, 3837456752, 2286581121, 2286581121, 2286581121,
        2286581121, 2286581121, 2286581121, 2286581121, 2286581121, 2286581121,
        2286581121, 2286581121, 2286581121, 2286581121, 2286581121, 1825755713,
        1437005534, 1735211478, 1427051896, 3498287168];
        b.iter(|| {
            let cipher_clone = ciphertext.clone();
            feistel_decrypt(cipher_clone, 19652000, 158);
        });
    }

    #[bench]
    fn paragraph_encryption(b: &mut Bencher) {
        let plaintext = "Before my departure I issued a joint statement with \
            Prime Minister Djuanda on trade and cultural matters. We had had \
            several talks since he received me at Jakarta aiport. He was an \
            excellent man—able, highly educated, realistic, and resigned to \
            the difficulties to his country. We had spoken for hours, \
            sometimes in Bahasa Indonesia. During one exchange over dinner, I \
            remarked that Indonesia was blessed with very fertile soild, a \
            favorable climate, and abundant resources. He looked at me sadly \
            and said, \"God is for us, but we are against ourselves.\" I felt \
            I could do business with a man of such honesty and sincerity. I \
            left feeling that we had become friends. I could speak Malay and \
            was to him more like an Indonesian peranakan (a local-born \
            Chinese), not a totok, a Chinese-speaking Chinese recent immigrant \
            who was less assimilated.";
        b.iter(|| feistel_encrypt(plaintext, 748291328, 186));
    }

    #[bench]
    fn paragraph_decryption(b: &mut Bencher) {
        let ciphertext = vec![425712345, 85469355, 288574128, 3532635476,
        1650318453, 1390964359, 3298445725, 1701493816, 2474691287, 2158002012,
        4205045755, 3542758351, 2407486888, 770685746, 4070031340, 2448434366,
        1036584232, 618581086, 3542758351, 1521705654, 3006292477, 1707400351,
        1203462252, 201855741, 736988925, 2505934733, 3684907284, 3548055057,
        1573658262, 4012042186, 2158002012, 90868828, 1896235961, 4151383570,
        209296075, 4257072303, 1911467962, 2064255624, 4204238516, 2628757845,
        2664582822, 3542758351, 2805678662, 229977183, 848152729, 789548307,
        1707400351, 1768078343, 2639210492, 4204238516, 4025872964, 2683194142,
        2527797783, 1650318453, 440853390, 1702006195, 3976021900, 1707400351,
        2473192714, 676436062, 3335397306, 2639210492, 358438196, 4172957429,
        4291400136, 1633531078, 1911467962, 15786657, 90868828, 2862027125,
        4012042186, 848152729, 1633288401, 958155860, 1460741581, 2916270533,
        1092546326, 2051043830, 2812397987, 1510576099, 2879835960, 4205045755,
        20236775, 1911467962, 2540612628, 209296075, 1276828621, 2051043830,
        272623385, 38610537, 729861521, 2664582822, 1243532383, 543019411,
        2884541507, 3289850892, 2829728243, 2396443971, 3835742483, 4257072303,
        4204238516, 20236775, 3357180582, 784534107, 2106118506, 1650963962,
        3549702496, 3956665518, 2563805094, 1465082346, 2059589587, 3548055057,
        62686566, 1465082346, 2059589587, 3548055057, 232373312, 2530712509,
        1770765460, 2688683738, 20236775, 1887455669, 2059589587, 729861521,
        1650963962, 789548307, 2884541507, 2279369643, 3225583064, 2825356040,
        1707400351, 1495122483, 440853390, 2984940249, 2602203315, 2815171252,
        2051043830, 773962279, 2913293077, 3197981360, 1887455669, 3956665518,
        2890005313, 3956665518, 3475452235, 1857677733, 2868647686, 1356675467,
        1460741581, 1702006195, 4291400136, 591885201, 2059589587, 3907089135,
        1650963962, 3630809860, 2540612628, 1766244053, 4012042186, 1650318453,
        185644672, 2059589587, 2563805094, 2540612628, 1665553900, 2151213462,
        3532635476, 4070031340, 4257072303, 598467805, 1911467962, 4255450123,
        3956665518, 591885201, 356833133, 2059589587, 1495122483, 1650963962,
        617307763, 3782438690, 2051043830, 3249508967, 1257302825, 888588832,
        2913293077, 2084669192, 3888117336, 1023566261, 848152729, 2812397987,
        1961375001, 3991698916, 2059589587, 3745574051, 1727239270, 3006831951,
        1622626028, 4012042186, 339476845, 1090089528, 229977183, 2732038861,
        2350792780, 1885048903, 52968306, 2877815566, 638917378, 2279369643,
        3199230652, 1573658262, 3956665518, 1776487871, 2473565401, 3951513397,
        1122685519, 1344835583, 63549407, 547689080, 1335483360, 1573658262,
        179313875, 3542758351, 2221068579, 3289850892, 3415498396, 3883068241,
        4257072303, 4209798089, 2020436848, 2562676006, 2051043830, 536098908,
        914573832, 3415866212, 591885201, 184717603, 2913293077, 784534107,
        550344807, 1393590202, 1022782778, 2913293077, 670516413, 1460741581,
        185644672, 1614477394, 2051043830, 2222206410, 1885048903, 1783956271,
        591885201, 3490924748, 676436062, 2551789626, 2262732694, 1178544326,
        2594843424, 2473565401, 3309528252, 4101658233, 1203462252, 1817247898,
        2530712509, 3197981360, 2812397987, 2426270492, 2051043830, 132005241,
        4151383570, 1430231744, 2051043830, 2059740497, 1896235961, 3821026901,
        848152729, 1540093606, 2986194036, 1704666051, 1683177193, 3298445725,
        1661889505, 3956665518, 4185552885, 1390020780, 3835742483, 3326565125,
        2051043830, 736988925, 1802395193, 4174121574, 1566016942, 3956665518,
        3926068019, 1961375001, 2262732694, 2539410868, 1510576099, 1460741581,
        1390020780, 3074269216, 2473565401, 1650318453, 3234561501, 91470998,
        1961375001, 784534107, 2982519323, 3762534001, 1214359447, 2812397987,
        4151383570, 2277136283, 744853311, 2530712509, 1961375001, 1203462252,
        839106057, 1911467962, 4145040844, 1122685519, 1390020780, 617307763,
        2530712509, 1122685519, 640796748, 1336919492, 3335397306, 3939133479,
        3074269216, 848152729, 3290141162, 3332946989, 3398094019, 2628757845,
        2589322260, 267505692, 2360895726, 2354710054, 3357180582, 1203462252,
        4087292446, 1321848404, 1573658262, 3532635476, 3926068019, 3956665518,
        1573658262, 1390964359, 2413675998, 927690033, 106979451, 2771303129,
        848152729, 2708064164, 3956665518, 2988764537, 4070710344, 4069828719,
        63549407, 1236679194, 267505692, 3326565125, 2517650599, 3745574051,
        3591623601, 2913293077, 4070031340, 525315446, 3298445725, 1363813268,
        232373312, 1633531078, 3290141162, 3232893502, 2540612628, 1510576099,
        1566016942, 20236775, 3326565125, 2051043830, 789548307, 1465082346,
        617307763, 4172957429, 1961375001, 562707050, 848152729, 522942046,
        583255618, 3661220016, 1770765460, 3555891654, 1869692337, 958155860,
        1961375001, 1773360976, 2059589587, 1938291215, 326267256, 2266259798,
        3289850892, 3595889821, 2530712509, 1495122483, 3956665518, 1356675467,
        1707400351, 1768078343, 1178544326, 4257072303, 132005241, 267505692,
        3601550382, 1770765460, 184717603, 1029561492, 3197981360, 1123294659,
        229977183, 1236679194, 2664582822, 46, 2148377787, 1843344736,
        1165472430, 1273171520, 4040757939, 2476553021, 528368900, 2893378459,
        1777948263, 2525913509, 333534407, 2105459399, 3292629519, 2298130800,
        623325210, 3877571760, 2470684469, 2054914695, 2105459399, 15406982,
        3211149837, 2201781489, 987573557, 1827773916, 1451092691, 3839718406,
        1612394075, 1788183926, 2915871731, 2133853368, 2525913509, 1206922899,
        3025759755, 3354042753, 3101222730, 1228740319, 2486137750, 749228655,
        2326996636, 3269287745, 190801952, 2105459399, 3028505394, 3192540839,
        1958780546, 422950842, 2201781489, 2859948543, 1188133928, 2326996636,
        236174451, 3881397277, 2773274694, 4040757939, 943736348, 1804887779,
        978279652, 2201781489, 2328075852, 1489006809, 239024859, 1188133928,
        3663534040, 1573747667, 1143354036, 942648043, 2486137750, 797075071,
        1206922899, 1988406069, 2133853368, 1958780546, 573879149, 3519709052,
        3165303026, 2775210583, 1499257359, 1835408030, 1111614185, 812388127,
        3752509681, 333534407, 817867702, 2486137750, 1810672902, 3101222730,
        25179377, 1835408030, 1594498880, 4052171838, 129129822, 190801952,
        1932243439, 848165913, 632362912, 3288920909, 3761044852, 2944987387,
        926672420, 1228740319, 2326996636, 817867702, 1639858667, 951362646,
        4110819568, 849354580, 4111962058, 925627441, 4157158697, 790742462,
        358722216, 1788183926, 1725631791, 790742462, 358722216, 1788183926,
        1974404237, 1231240210, 1230315537, 1290574545, 817867702, 3160363148,
        358722216, 129129822, 849354580, 422950842, 632362912, 49650548,
        1761441701, 3208117579, 2201781489, 2836528300, 943736348, 2861139403,
        3693999568, 3532594337, 1835408030, 2992088573, 3311193349, 1339730174,
        3160363148, 925627441, 3054349138, 925627441, 1846829685, 3729048291,
        2919537275, 558586787, 3165303026, 1804887779, 1143354036, 1983535602,
        358722216, 498668231, 849354580, 245277674, 1810672902, 2771052370,
        2133853368, 4040757939, 3725549845, 358722216, 4157158697, 1810672902,
        3086648270, 582865784, 1273171520, 623325210, 1228740319, 798262232,
        2486137750, 1538696334, 925627441, 1983535602, 1397120820, 358722216,
        2836528300, 849354580, 281865117, 3576140039, 1835408030, 4190038126,
        180854232, 714071813, 3311193349, 3932852374, 3146372794, 3045551657,
        1958780546, 1111614185, 3093907148, 245428689, 358722216, 1313577042,
        1068757821, 2527459225, 74130856, 2133853368, 1074738402, 4129074634,
        3192540839, 929622291, 1613306637, 3581885912, 936106161, 2575955171,
        1717931127, 49650548, 4006757315, 2915871731, 925627441, 1202874873,
        2451812197, 2860928553, 4185532616, 1348092550, 3221541617, 1450108034,
        1130968898, 2915871731, 3932392531, 2105459399, 3897581075, 3288920909,
        3474088805, 3701618119, 1228740319, 1521486236, 3941307284, 3016236188,
        1835408030, 4255862456, 1644867629, 2309915356, 1983535602, 2957776334,
        3311193349, 951362646, 2408164914, 1304737554, 1037840074, 3311193349,
        3043759885, 3165303026, 3725549845, 3678042871, 1835408030, 3050862081,
        3581885912, 1180989824, 1983535602, 2194702, 1489006809, 1598699313,
        457310395, 1666980188, 1186038558, 2451812197, 2890372618, 476765276,
        987573557, 1519944460, 1231240210, 1339730174, 1111614185, 2300103489,
        1835408030, 50735991, 3354042753, 2407360779, 1835408030, 265385963,
        3025759755, 3770112194, 1958780546, 1344441423, 741928100, 3122924541,
        831504245, 528368900, 1903017508, 925627441, 2956625913, 2038612029,
        926672420, 2026649756, 1835408030, 1451092691, 3958152450, 1104697631,
        1702709163, 925627441, 1034536990, 3093907148, 457310395, 3840980406,
        812388127, 3165303026, 2038612029, 1534214072, 2451812197, 4040757939,
        954818682, 521563478, 3093907148, 951362646, 884637186, 506898161,
        1782653165, 1111614185, 3354042753, 2663160413, 1587155838, 1231240210,
        3093907148, 987573557, 2543969479, 2486137750, 2587852131, 4185532616,
        2038612029, 281865117, 1231240210, 4185532616, 1009292793, 2781736796,
        239024859, 2110092810, 1534214072, 1958780546, 2611148245, 942957579,
        1704857815, 3269287745, 580405906, 3486846019, 482165889, 2086971281,
        1639858667, 987573557, 817721742, 3208248365, 2915871731, 1273171520,
        1034536990, 925627441, 2915871731, 2476553021, 2395619439, 2335409140,
        2635938277, 1620823873, 1958780546, 557271759, 925627441, 2363988073,
        416139592, 2290256721, 3221541617, 4188327629, 3486846019, 2026649756,
        3116167088, 1313577042, 1684288458, 3311193349, 623325210, 2930487459,
        528368900, 3669790709, 1974404237, 942648043, 2611148245, 2643534405,
        1810672902, 812388127, 1702709163, 817867702, 2026649756, 1835408030,
        422950842, 790742462, 281865117, 1573747667, 3093907148, 4069789582,
        1958780546, 4169804889, 3104106719, 1787804368, 1230315537, 2134986919,
        3360973594, 3519709052, 3093907148, 571608712, 358722216, 2698114042,
        1636878316, 2690236813, 3288920909, 568582114, 1231240210, 2836528300,
        925627441, 558586787, 2201781489, 2859948543, 1666980188, 1228740319,
        50735991, 3486846019, 2219180524, 1230315537, 2957776334, 2990818120,
        1339730174, 3364792964, 3192540839, 4188327629, 190801952];

        b.iter(|| {
            let cipher_clone = ciphertext.clone();
            feistel_decrypt(cipher_clone, 748291328, 186);
        });
    }
}
